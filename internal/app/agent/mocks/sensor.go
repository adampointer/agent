// Code generated by MockGen. DO NOT EDIT.
// Source: sensor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sensors "github.com/adampointer/agent/internal/app/agent/sensors"
	gomock "github.com/golang/mock/gomock"
)

// MockSensor is a mock of Sensor interface.
type MockSensor struct {
	ctrl     *gomock.Controller
	recorder *MockSensorMockRecorder
}

// MockSensorMockRecorder is the mock recorder for MockSensor.
type MockSensorMockRecorder struct {
	mock *MockSensor
}

// NewMockSensor creates a new mock instance.
func NewMockSensor(ctrl *gomock.Controller) *MockSensor {
	mock := &MockSensor{ctrl: ctrl}
	mock.recorder = &MockSensorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSensor) EXPECT() *MockSensorMockRecorder {
	return m.recorder
}

// DoScan mocks base method.
func (m *MockSensor) DoScan(ctx context.Context) (*sensors.SnapshotEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoScan", ctx)
	ret0, _ := ret[0].(*sensors.SnapshotEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoScan indicates an expected call of DoScan.
func (mr *MockSensorMockRecorder) DoScan(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoScan", reflect.TypeOf((*MockSensor)(nil).DoScan), ctx)
}
